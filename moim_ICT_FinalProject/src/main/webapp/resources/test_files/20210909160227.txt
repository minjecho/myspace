<스프링 프레임워크(Spring Framework)>
 : 자바 플랫폼을 위한 오픈소스 애플리케이션 프레임워크로서 
  간단히 스프링(Spring)이라고도 불린다. 
 - 동적인 웹 사이트를 개발하기 위한 여러 가지 서비스를 제공하고 있다. 
 - 대한민국 공공기관의 웹 서비스 개발시 사용을 권장하고 있는 
	전자정부 표준프레임워크의 기반 기술로서 쓰이고 있다.

 [ 역사 ]
  : 로드 존슨이 2002년에 출판한 자신의 저서인 
	Expert One-on-One J2EE Design and Developement에 
	선보인 코드를 기반으로 시작하여 점점 발전하게 되었다. 
  이 프레임워크는 2003년 6월에 최초로 아파치 2.0 라이선스로 공개되었으며
   주요 버전 이력은 다음과 같다.

	- 1.0 : 2004년 3월
	- 2.0 : 2006년 10월
	- 2.5 : 2007년 11월
	- 3.0 : 2009년 12월
	- 3.1 : 2011년 12월
		.......  ......
	- 4.1 : 2014년 
	- 4.4.2 : 2015년 8월

   2006년에 1.2.6 버전으로 Jolt Productive Award와 Jax Innovation Award를 수상하였다.


 [ 특징 ]
   스프링은 다른 프레임워크에 비해 다음과 같은 특징을 가진다.

   - POJO(Plain Old Java Object) 방식의 프레임워크 - 
    (* POJO : 경량의 자바 객체 또는 별도로 종속되지 않는 자바 객체를 의미함)

    => 경량 컨테이너로서 자바 객체를 직접 관리한다. 
    각각의 객체 생성, 소멸과 같은 라이프 사이클을 관리하며 스프링으로부터 
    필요한 객체를 얻어올 수 있다.    
    => 일반적인 J2EE 프레임워크에 비해 구현을 위한 특정한 인터페이스를 
    구현하거나 상속을 받을 필요가 없이 기존에 존재하는 라이브러리 등을 지원하기에
	사용이 용이하고 객체가 가볍다.


  - 제어 반전 컨테이너 -
    : 제어 반전(IoC: Inversion of Control) 컨테이너는 스프링의 가장 중요하고
    핵심적인 기능으로서 자바의 반영(reflection)을 이용해서 객체의 생명주기를 
    관리하고 의존성 주입(Dependency Injection)을 통해 각 계층이나 서비스들간의
    의존성을 맞춰준다. 

    => 이러한 기능들은 주로 환경설정을 담당하는 XML 파일에 의해 설정되고 
    수행된다.
    => 스프링은 제어 반전(IoC : Inversion of Control)을 지원한다.
      : 컨트롤의 제어권이 사용자가 아니라 프레임워크에 있어서 필요에 따라 
      스프링에서 사용자의 코드를 호출한다.
    => 스프링은 의존성 주입(DI : Dependency Injection)을 지원한다. 
      : 각각의 계층이나 서비스들 간에 의존성이 존재할 경우 프레임워크가 서로
          연결시켜 준다.

    
  - 관점 지향 프로그래밍 프레임워크 -
    : 스프링은 관점 지향 프로그래밍(AOP : Aspect-Oriented Programming)을 
    지원한다.

    => 스프링은 로깅이나 보안, 트랜잭션 등 핵심적인 비즈니스 로직과 관련이
           없으나 여러 곳에서 공통적으로 쓰이는 기능들을 분리하여 개발하고 
      실행 시에 서로 조합할 수 있는 관점 지향 프로그래밍(AOP)을 지원한다. 
    => 기존에 널리 사용되고 있는 강력한 관점 지향 프로그래밍 프레임워크인
           AspectJ도 내부적으로 사용할 수 있으며,
    => 스프링 자체적으로 지원하고 있는 실행시(Runtime)에 조합하는 방식도
      지원한다.


  - 데이터 액세스/통합 프레임워크 -
    : 스프링은 데이터베이스에 접속하고 자료를 저장 및 읽어오기 위한 여러 가지 
    유명한 라이브러리, 즉 JDBC, iBatis(MyBatis), Hibernate 등에 대한 지원 
    기능을 제공하여 데이터베이스 프로그램밍을 쉽게 사용할 수 있다.
    =>  트랜잭션 관리 프레임워크 
    : 스프링은 추상화된 트랜잭션 관리를 지원하며 XML 설정파일 등을 이용한
         선언적인 방식 및 프로그래밍을 통한 방식을 모두 지원한다.


  - 스프링은 확장성이 높다. -
    : 스프링 프레임워크에 통합하기 위해 간단하게 기존 라이브러리를 감싸는 정도로 
    스프링에서 사용이 가능하기 때문에 수많은 라이브러리가 이미 스프링에서 지원되고 
    있고 스프링에서 사용되는 라이브러리를 별도로 분리하기도 용이하다.


  - 모델-뷰-컨트롤러(MVC) 패턴 -
    : 스프링은 웹 프로그램밍 개발 시 거의 표준적인 방식인 Spring MVC라 불리는 
    모델-뷰-컨트롤러(MVC) 디자인 패턴을 사용한다. 
    => DispatcherServlet 이 Contoller 역할을 담당하여 각종 요청을 적절한 
    서비스에 분산시켜 주며, 이를 각 서비스들이 처리를 하여 결과를 생성하고 
    그 결과는 다양한 형식의 View 서비스들로 화면에 표시될 수 있게 한다.


  - 배치 프레임워크 -
    : 스프링은 특정 시간대에 실행하거나 대용량의 자료를 처리하는데 쓰이는 
    일괄 처리(Batch Processing)를 지원하는 배치 프레임워크를 제공한다. 
    기본적으로 스프링 배치는 Quartz 기반으로 동작합니다

    ※ Quartz : 주기적으로 특정 작업이 수행되게 하는 오픈 소스 Job Scheduler


 [ 스프링 프레임워크 모듈 구성 ]
  2012년 12월 발표된 릴리즈 4.0 모듈은 
	Core Container, 
	Data Access/Integration, 
	Web, 
	AOP, 
	Instrumentation, 
	test 의 7개의 카테고리로 구분되고 약 20개의 모듈로 구성되어 있음

	[Spring Framework Runtime]
		[ Data Access/Integration ] [ 	Web    	]
		[   AOP  ] [  Aspects  ] [  Instrumenataion ]
		[		Core Container	 	]
		[   		Test			]

 => 스프링 프레임워크 레퍼런스 가이드 url : 
 http://docs.spring.io/spring/docs/3.1.x/spring-framework-reference/html/

 => 스프링 프레임워크 다운 url :
 http://spring.io/tools/ggts/all


 [ 주요 모듈 ]
   스프링에서 사용되는 주요 모듈은 다음과 같다.

  - 코어 컨테이너(Core Container) 카테고리 -----------------------------------
    : Core, Beans, Context, EL 4개의 모듈로 구성되어 있음.

    => Core 모듈과 Beans 모듈은 프레임워크의 기반이 되는 가장 핵심 부분으로, 
    Ioc 와 DI 기능을 제공함.
    => Context 모듈은 Core 모듈과 Beans 모듈 기반 위에 구성되며, 
    Beans 모듈의 기능을 상속받고, 국제화, 이벤트, 전이, 리소스 로딩, 
    서블릿 컨테이너와 같은 컨텍스트의 생성 기능들을 제공함.
    => EL(Expression Language) 모듈은 런타임에서 객체 그래프를 조회하고 
    조작할 수 있는 강력한 표현 언어 기능을 제공함


   - 데이터 접근/통합 카테고리 ----------------------------------------------------
    : Data Access/Integration 계층은 5개의 모듈
    (JDBC, ORM, OXM, JMS, 트랜젝션 모듈)로 구성되어 있다.
	    
    => JDBC 모듈 : JDBC 추상화 게층을 제공함, 데이터베이스의 종류에 따른
    JDBC 관련 코딩의 에러 코드를 다룸.
    => ORM 모듈 : iBatis 또는 MyBatis, JPA, JDO, 하이버네이트(Hibernate)
    와 같은 객체-관계 매핑 API 통합 계층 제공.
    => OXM 모듈 : JAXB, Castor, XMLBeans, JiBX, XStream 과 같은 
    객체/XML 매핑 구현 계층 지원
    => JMS(Java Messaging Service) 모듈 : 메시지의 생성, 소비 기능 제공
    => Transaction 모듈 : 특별한 인터페이스와 POJO(Plain Old Java Object)
     의 클래스에 대한 트랜젝션 관리 기능 제공


   - 웹(web) 카테고리 ---------------------------------------------------------
    : web 계층은 4개의 모듈
    (Web, Web-Servlet, Web-Struts, Web-Portlet)로 구성되어 있다.

    => Web 모듈 : 멀티파트 파일업로드, 서블릿 리스너와 웹 지향적인 에플리케이션 
    컨텍스트를 사용한 Ioc 컨테이너의 초기화 등 기본적인 웹 지향적인 통합기능 제공
    => Web-Servlet 모듈 : 웹 애플리케이션에 필요한 스프링 MVC 구현을 제공하며, 
	JSP, Velocity에 대한 뷰 연동을 지원
    => Web-Struts 모듈 : 스프링 애플리케이션과 스트럿츠의 연동 기능을 제공하며, 
    	스프링 3.0부터 폐기되었음.
    => Web-Portlet 모듈 : 포틀릿 환경에서 사용되는 MVC 구현과 웹-서블릿 모듈 
    	기능의 미러(MIRROR) 기능을 제공


   - AOP 와 인스트루멘테이션(Instrumenataion) 카테고리 ----------------------
    => AOP 모듈 : AOP Alliance 규약에 호환되는 관점-지향 프로그래밍
    		구현체로서, 메서드 인터셉트와 포인트 컷 정의하여 기능별로 분리할 수 있다.
    => Aspects 모듈 : AspectJ와의 통합을 제공함
    => Instrumentation 모듈 : 인스트루멘테이션을 지원하는 클래스와 특정 
    	애플리케이션 서버에서 사용되는 클래스로더(classloader) 구현체를 제공함.


   - 테스트(Test) 카테고리 -----------------------------------------------------
    : JUnit 또는 TestNG를 사용하여 스프링 컴포넌트의 테스트를 지원함



	


